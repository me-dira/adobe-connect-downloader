<html lang="en">
<head>
<title>Adobe Connect Central Login</title>
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<script src="/common/scripts/showContent.js?ver=12.1.5"></script><script type="text/javascript" src="/common/scripts/breezeUI.js?ver=12.1.5"></script><script language="JavaScript" type="text/javascript" src="/common/scripts/s_code.js?ver=12.1.5"></script><script type="text/javascript">
            var AnalyticsConnectUtilObj;
        </script><script type="text/javascript">
				if (!Function.prototype.bind) {
				  Function.prototype.bind = function(oThis) {
					if (typeof this !== 'function') {
					  // closest thing possible to the ECMAScript 5
					  // internal IsCallable function
					  throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
					}

					var aArgs   = Array.prototype.slice.call(arguments, 1),
						fToBind = this,
						fNOP    = function() {},
						fBound  = function() {
						  return fToBind.apply(this instanceof fNOP && oThis
								 ? this
								 : oThis,
								 aArgs.concat(Array.prototype.slice.call(arguments)));
						};

					fNOP.prototype = this.prototype;
					fBound.prototype = new fNOP();

					return fBound;
				  };
				}		 
				
                var AnalyticsConnectUtil = function()
                  {
                    this.initialized = false;
                    this.sendInternalAnalyticsData = this.sendInternalAnalyticsData.bind(this);
                  }

                AnalyticsConnectUtil.prototype.initialize = function() {
                    // Check Dependecies
                    if(!this.iaCaller && InternalAnalyticsCaller && BrowserUtils && InternalAnalyticsFields && InternalAnalyticsFields) {
                      this.iaCaller = new InternalAnalyticsCaller(window.location.protocol+"//"+window.location.host, true);
                    }
                    if(this.iaCaller && this.iaCaller.trackingState === 'ready')
                      this.initialized = true;
                }
                  
                AnalyticsConnectUtil.prototype.sendSwfLoad = function(swfName)
                  {
                      var analyticsData = {};
                      if(swfName&& swfName != "")
                        analyticsData[InternalAnalyticsFields.SWF_NAME] = swfName;
                      this.sendInternalAnalyticsDataTimer(InternalAnalyticsFields.EVENT_CC_SWF_LOADED, analyticsData);
                  }

                AnalyticsConnectUtil.prototype.sendReportLoad = function(reportPath, navScoTypeAndIcon, reportName)
                  {
                      var analyticsData = {};
                      if(reportPath && reportPath != "")
                        analyticsData[InternalAnalyticsFields.REPORT_PATH] = reportPath;
                      if(navScoTypeAndIcon && navScoTypeAndIcon != "")
                        analyticsData[InternalAnalyticsFields.NAV_SCO_TYPE_AND_ICON] = navScoTypeAndIcon;
                      if(reportName && reportName != "")
                        analyticsData[InternalAnalyticsFields.REPORT_NAME] = reportName;
                      this.sendInternalAnalyticsDataTimer(InternalAnalyticsFields.EVENT_CC_REPORT_LOADED, analyticsData);
                  }


                AnalyticsConnectUtil.prototype.sendInternalAnalyticsData = function(eventName, analyticsData, sleepTime, reTries)
                  {
                    if(!this.initialized) {
                      this.initialize();
                    }
                    if(this.initialized) {
                      this.iaCaller.sendInternalAnalyticsData(eventName, analyticsData);
                    } else {
                      if(reTries > 0) {
                        this.sendInternalAnalyticsDataTimer(eventName, analyticsData, sleepTime, reTries-1)
                      }
                    }
                  }


                AnalyticsConnectUtil.prototype.sendInternalAnalyticsDataTimer = function(eventName, analyticsData, sleepTime, reTries)
                  {
					if(sleepTime == undefined)sleepTime=500;
					if(reTries == undefined)sleepTime=20;					
                    setTimeout(this.sendInternalAnalyticsData, sleepTime, eventName, analyticsData, Math.min(sleepTime*2, 10000), reTries)
                  }

                var AnalyticsConnectUtilObj = new AnalyticsConnectUtil();
        </script><script language="JavaScript" type="text/javascript" src="/common/scripts/BrowserUtils.js?ver=12.1.5"></script><script language="JavaScript" type="text/javascript" src="/common/scripts/analytics/IACaller.js?ver=12.1.5"></script><script language="JavaScript" type="text/javascript" src="/common/scripts/analytics/IAFields.js?ver=12.1.5"></script><script>
          var days_of_month = [
          "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"
                ];
        

          function roundedCorners()
          {
            var tables = document.getElementsByTagName("table");

            // First locate all tables of class "contentTable"
            for (var i = 0; i < tables.length; i++)
            {
               if (/\bcontentTable\b/.exec(tables[i].className))
               {
                    var content = tables[i];
                    var rows = content.getElementsByTagName("tr");
                    // make sure the first row is of type "contentHeader"
                    if (/\bcontentHeader\b/.exec(rows[0].className))
                    {
                      var header = rows[0];
                      var cols = header.getElementsByTagName("th");

                      if (cols.length == 0)
                        cols = header.getElementsByTagName("td");

                      if (cols.length > 1)
                      {
                        var first = 0;
                        var last = cols.length-1;

                        cols[first].style.backgroundImage = "url(/common/images/globalnav/tl.gif)";
                        cols[first].style.backgroundImage.marginTop = "0px";
                        cols[first].style.backgroundRepeat = "no-repeat";
                        cols[first].style.backgroundPosition = "left 0%";

                        cols[last].style.backgroundImage = "url(/common/images/globalnav/tr.gif)";
                        cols[last].style.backgroundRepeat = "no-repeat";
                        cols[last].style.backgroundPosition = "right 0%";
                      } else  {
                        // XXX - need to find a way to handle single column tables
                        cols[0].style.backgroundImage = "url(/common/images/globalnav/tl.gif)";
                        cols[0].style.backgroundImage.marginTop = "0px";
                        cols[0].style.backgroundRepeat = "no-repeat";
                        cols[0].style.backgroundPosition = "left 0%";
                      }
                    }

                    // Put a nice edge on the tables.
					for (j=1;j<rows.length;j++) {
						var row = rows[j];
						var cols = row.getElementsByTagName("td");
					  	if (cols.length >= 1)
					  	{
							var first = 0;
							var last = cols.length-1;

							cols[first].style.borderLeftColor = "#e4e4e4";
							cols[first].style.borderLeftStyle = "solid";
							cols[first].style.borderLeftWidth = "1px";

							cols[last].style.borderRightColor = "#e4e4e4";
							cols[last].style.borderRightStyle = "solid";
							cols[last].style.borderRightWidth = "1px";
					  	}
					}
                }
            }
          }


            function initPage()
            {

               roundedCorners();
               RoundedTop("li.tab2","transparent","#E4E4E4");
               RoundedTop("li.tab2Sel","transparent","#A7ACB1");
               if (document.contentForm!=null)
               {
                    var ele = document.contentForm.elements;
                    for (i=0;i < ele.length;i++)
                    {
                        if (((ele[i].type=='text')||(ele[i].type=='file') || (ele[i].type=='textarea'))
                        && (ele[i].disabled!=true) && (document.contentForm.elements[i].visible == true))
                        {
                          document.contentForm.elements[i].focus();
                          break;
                        }
                    }
                }
               
                var lFlag = window.sessionStorage.getItem('loginFlag');
               	var gFlag = window.sessionStorage.getItem('guestFlag');
               	var eFlag = window.sessionStorage.getItem('emailFlag');
               	var pFlag = window.sessionStorage.getItem('passcodeFlag');
               	var npFlag = window.sessionStorage.getItem('newPasswordFlag');
               	var rpFlag = window.sessionStorage.getItem('recordingPasscodeFlag');
                var loginUsername = window.sessionStorage.getItem('loginUsername');

               	var newClass = null;
                var contentForm = document.contentForm;

                var imageAlertElement = function() {
                    var element = document.createElement('img');
                    element.setAttribute("class", "image-alert");
                    element.setAttribute("src", "/common/images/alert.svg");
                    return element;
                }

                function insertAfter(newElement,targetElement) {
                    // target is what you want it to go after. Look for this elements parent.
                    var parent = targetElement.parentNode;

                    // if the parents lastchild is the targetElement...
                    if (parent.lastChild == targetElement) {
                        // add the newElement after the target element.
                        parent.appendChild(newElement);
                    } else {
                        // else the target has siblings, insert the new element between the target and it's next sibling.
                        parent.insertBefore(newElement, targetElement.nextSibling);
                    }
                }

                // Added setTimeout because when "coral3-Textfield--quiet" class is added
                // it doesn't remember that "is-invalid" class was added before it.

               	setTimeout(function(){
               	
                    if (lFlag == 'true' && contentForm != undefined && document.contentForm.login !== undefined){
                        if(loginUsername && loginUsername !== "null") {
                            document.contentForm.login.value = loginUsername;
                        }
                        var newClass = document.contentForm.login.getAttribute("class") + " is-invalid";
                        document.contentForm.login.setAttribute("class", newClass);

                        insertAfter(imageAlertElement(), document.contentForm.login);
                        document.contentForm.password.setAttribute("class", newClass);
                        insertAfter(imageAlertElement(), document.contentForm.password);

                        var passcodeElement = document.getElementById('meeting-passcode-reguser');
                        if (passcodeElement) {
                            insertAfter(imageAlertElement(), passcodeElement);
                            passcodeElement.classList.add("is-invalid");
                        }
                    }
                    else if (gFlag == 'true' && contentForm != undefined && document.contentForm.guestName !== undefined){
                        document.contentForm.guestName.classList.add("is-invalid");
                        insertAfter(imageAlertElement(), document.contentForm.guestName);
                        document.contentForm.guestName.focus();
                        var passcodeElement = document.getElementById('meeting-passcode-guest');
                        if (passcodeElement) {
                            insertAfter(imageAlertElement(), passcodeElement);
                            passcodeElement.classList.add("is-invalid");
                        }
                    }
                    else if (eFlag == 'true' && contentForm != undefined && document.contentForm.email !== undefined){
                        if(loginUsername  && loginUsername !== "null" && !document.contentForm.email.value) {
                            document.contentForm.email.value = loginUsername;
                        }
                        document.contentForm.email.classList.add("is-invalid");
                        insertAfter(imageAlertElement(), document.contentForm.email);
                        document.contentForm.email.focus();
                    }
                    else if (pFlag == 'true') {
                        var element = document.getElementById("meeting-passcode");
                        element.classList.add("is-invalid");
                        insertAfter(imageAlertElement(), element);
                        element.focus();
                    }
                    else if (npFlag == 'true' && contentForm && contentForm.password && contentForm["password-verify"] ) {
                        insertAfter(imageAlertElement(), contentForm.password);
                        contentForm.password.classList.add("is-invalid");
                        insertAfter(imageAlertElement(), contentForm["password-verify"]);
                        contentForm["password-verify"].classList.add("is-invalid");
                    } else if ( rpFlag == 'true' && recordingPasscodeForm && recordingPasscodeForm['recording-passcode'] ) {
                        insertAfter(imageAlertElement(), recordingPasscodeForm['recording-passcode']);
                        recordingPasscodeForm['recording-passcode'].classList.add('is-invalid');
                    }

                    if ( document.contentForm && document.contentForm.login ) {
                        
                        if(loginUsername && loginUsername !== "null") {
                            document.contentForm.login.value = loginUsername;
                        }
                        //do not focus on Username field if Account URL field is visible 
                        if(document.contentForm.domain == null) {
                            document.contentForm.login.focus();
                        } 
                    }
                    if ( document.contentForm && document.contentForm.guestName ) {

                        document.contentForm.guestName.focus();
                    }
                    if ( document.contentForm && document.contentForm.email ) {
                        if(loginUsername && loginUsername !== "null" && !document.contentForm.email.value) {
                            document.contentForm.email.value = loginUsername;
                        }
                        document.contentForm.email.focus();
                    }

                    window.sessionStorage.clear();
                    if(loginUsername && loginUsername !== "null") {
                        window.sessionStorage.setItem("loginUsername", loginUsername); // save username after page reload  
                    }

               	}, 100);
            }



            // these colors should match with the ones in breeze.css:button
            function hover(b, over) {
                if (over) {
                    b.style.borderColor = "#aedf9a #94da78 #6ab94b #94da78";
                } else {
                   b.style.borderColor = "#c4cccc #acb5b5 #6f7777 #acb5b5";
                }
            }

            /* For Our pages which have forms, this can be used to provide users with a Prompt if they navigate away from the page with a form that is not completely filled
            */
            var isDirty = false;

            function setDirty(){
              isDirty = true;
              console.log("Setting Dirty");
            }

            function unsetDirty(){
              isDirty = false;
              console.log("Unset Dirty");
            }

            window.onbeforeunload = function(evt){
              if(isDirty){
                return "";
              }
            }
        
        </script>
<link rel="stylesheet" type="text/css" href="/common/styles/globalnav.css?ver=12.1.5">
<link rel="stylesheet" type="text/css" href="/common/styles/breeze.css?ver=12.1.5">
<link rel="stylesheet" type="text/css" href="/_a295153/webappBanner/custom/styles/banner_colors.css?ver=12.1.5">
<link rel="stylesheet" type="text/css" href="/_a295153/loginPage/custom/styles/login_colors.css?2022-12-20T09:13:31.113+00:00">
<script type="text/javascript" src="/common/scripts/login.js?ver=12.1.0" xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder"></script><script xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder">
		// setting cookie for IPAD IOS 13 devices
		if(isIPadVersion13Devices())
				document.cookie = "platform=iPad";
			
			function redirectToIDPServer(){
				
					if(validateEmail($("input[name=login]").val())){
						$('#invalid-email-error').hide();
					}else{
						$('.login-error').hide();
						$('#invalid-email-error').show();
					}
				
				var oktadomain = "@adobe.com";
				
				
				var oktaloginurl = "https:\/\/adobe.okta.com\/app\/adobesystems_adobeconnectar_1\/exk1gfmkjwwTOMmth0h8\/sso\/saml";
				
				// multi domain lists separated by Semicolon
				var multiDomainNames = oktadomain.split(';');
				
				var loginName=$("input[name=login]").val();
				var registerTab = document.getElementById("registeredTab1");
				if(oktadomain){
					for(var i =0 ;i < multiDomainNames.length ;i++){
						loginName = loginName.toLowerCase();
						var multiDomainName = multiDomainNames[i].toLowerCase();
						if(loginName.indexOf(multiDomainName) !== -1){
							if(!registerTab  || registerTab.selected){
								var relayState='{"action":"CPS_WORKFLOW","redirect":"'+window.location.pathname+'"}';
								if(document.contentForm.remember && document.contentForm.remember.checked  && typeof connectApp !== "undefined")
								{
									connectApp.LoginPage.saveExtraOnLogin()
								}			
								window.location = makeSSOLoginUrl(oktaloginurl, relayState);
								return false;
							}
						}
					}
				}
				return true;
			}
			
			
			function validateEmail(email){
				var re = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
				return re.test(email);
			}
			
			// function to construct sso login url based on template
			function makeSSOLoginUrl(oktaLoginURL, relayState ){
				var ssoLoginUrl = "";
				if(oktaLoginURL.indexOf('{$') == -1){
					ssoLoginUrl = makeDefaultSSOLoginUrl(oktaLoginURL, relayState);
				}        
				else
					ssoLoginUrl = oktaLoginURL.replace("{$RELAYSTATE}", encodeURIComponent(relayState));
				return ssoLoginUrl;
			}
			
			function makeDefaultSSOLoginUrl (oktaLoginURL, relayState){
				var ssoLoginUrl = "";
				if(oktaLoginURL.indexOf('?') == -1)
					ssoLoginUrl = oktaLoginURL + "?RelayState=" + encodeURIComponent(relayState);
				else
					ssoLoginUrl = oktaLoginURL + "&RelayState=" + encodeURIComponent(relayState);
				return ssoLoginUrl;
			}
			
			function isIPadVersion13Devices(){
				const ipad = (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);
				return ipad;
			}
			
			function submitForm(){
				return redirectToIDPServer();
			}
			
			
			function setLoginCookie(login) {
				var expires = new Date();
				var expiresWin = 365 * 360 * 24 * 7 * 1000; // set for 1 yr
				expires.setTime(expires.getTime() + expiresWin);
				
				sessionStorage.setItem("loginFlag", "true");

                var loginUsername = document.contentForm.login.value;
				sessionStorage.setItem("loginUsername", loginUsername);
							
				if(document.contentForm.remember.checked == false)
				{
					//If the user unchecks the box (which it is by default), 
					//we short circuit and make sure that any login name that 
					//was stored is cleared.
					
					
					var isSecure = 'true';				
					
					var sameSite = "Lax";
					
					var cookie = "BreezeLoginCookie="
						+ "; path=/"
						+ "; expires=" + expires.toGMTString();

					if(isSecure === "true"){
						cookie += "; Secure";
						if(sameSite.toLowerCase() === "none"){
							cookie += ";SameSite =" + sameSite;
						}
					}
					if(sameSite.toLowerCase() === "strict" || sameSite.toLowerCase() === "lax"){
							cookie += ";SameSite =" + sameSite;
					}
					document.cookie = cookie;
					
					return;
				}
				
				if(typeof connectApp !== "undefined") {
					connectApp.LoginPage.saveExtraOnLogin()
				}
			
				// escape stuff going into cookies
				login = escape(login);
				
				//Explicitly specify the path within the domain (root makes the most sense) 
				//otherwise the main login page will keep separate cookies from a meeting 
				//login page, which makes for a confusing user experience.
				
				
				var isSecure = 'true';				
				
				var sameSite = "Lax";
				
				var cookie = "BreezeLoginCookie="
					+ "; path=/"
					+ "; expires=" + expires.toGMTString();

				if(isSecure === "true"){
					cookie += "; Secure";
					if(sameSite.toLowerCase() === "none"){
						cookie += ";SameSite =" + sameSite;
					}
				}
				if(sameSite.toLowerCase() === "strict" || sameSite.toLowerCase() === "lax"){
						cookie += ";SameSite =" + sameSite;
				}
				document.cookie = cookie;
					
				if(connectApp){
					connectApp.LoginPage.saveSessionOnLogin(); 
				}	

			}

			function getValueFromCookie(name) {
				re = /^\s*(\w)\s*$/; // trim string

				s = document.cookie.replace(re, "$1");
				var pairs = s.split(";");
				for(var i=0;i<pairs.length;++i) {
					var pairSplit=pairs[i].split("=");
					if (pairSplit[1] == undefined) continue;
					pairSplit[0] = pairSplit[0].replace(re, "$1").replace( /^\s+/g, "" );// strip leading
					pairSplit[1] = pairSplit[1].replace(re, "$1").replace( /^\s+/g, "" );
					if (pairSplit[0].valueOf()==name) {
						return unescape(pairSplit[1]);
					}
				}
				return "";
			}
			
			function checkCookies() {
				var cookieEnabled=(navigator.cookieEnabled)? true : false

				//if not IE4+ nor NS6+
				if (typeof navigator.cookieEnabled=="undefined" && !cookieEnabled){
					document.cookie="testcookie"
					cookieEnabled=(document.cookie.indexOf("testcookie")!=-1)? true : false
				}

				if (cookieEnabled==false) {
					alert("You need to have cookies enabled to login to connect.");
				}
			}

			function init() {	
				document.contentForm.onsubmit = function() {return submitForm();};	
				// ++++ Verify if the request is from a mobile device and open the meeting URL in the APP  STARTS ++++
								
				
				var showLoginForm = true;
				
				// ++++ Verify if the request is from a mobile device and open the meeting URL in the APP  ENDS ++++
				
				if(showLoginForm) {
					$('#loginBgColorX').show();
				}	

				if(typeof connectApp !== "undefined") {
					connectApp.Window.maximize();
					if(connectApp.LoginPage.loadStartupPage){
						$('.application-back-btn').show();
						$( '.application-back-btn' ).click(function() {
						  connectApp.LoginPage.loadStartupPage();
						});						
					}			
			        
				}
      
				
				if (top != self)
					top.location.href=self.location.href;
										
				//var name=getLoginFromCookie();
  				//document.contentForm.login.focus();
  				//document.contentForm.login.value=name;

				checkCookies();

				// ++++ CONN-4105604 : Verify if the request is from Connect App and make changes to the page according to the need
				
				//CONN-4093761 : Adding Spectrum components to Login Pages
				$('body').addClass('coral--light');
				//Add background image url for side-logo
				var isMobile = false;
				if(!isMobile){
					var backgroundImageUrl = "";
					var _loginSideLogo = document.getElementById('loginSideLogo');
					if (_loginSideLogo) {
						backgroundImageUrl = _loginSideLogo.src;
					}

					//Set this url to css background-image of side-logo
					document.getElementsByClassName('side-logo')[0].style.backgroundImage = "url(" + backgroundImageUrl+ ")";
				}

				// CONN-4107122 : In firefox, IE remember tag available in onLoad and not before that due to addition of coral spectrum checkbox
				if(document.contentForm.remember != undefined)
					document.contentForm.remember.checked = rememberMe;
			}
			
			
		</script>
</head>
<body class="loginClass" onLoad="
        initPage();init()">
<div id="pageContent-id" class="pageContent" style="width:100%">
<form id="postNavLinksForm" name="postNavLinksForm" method="post" action="">
</form>
<script>
			function doPostNavLink(path) {
				var form = document.forms["postNavLinksForm"];
				form.action = path;
				form.submit();
			}
		</script>
<form style="margin:0px" id="contentForm" name="contentForm" method="post" accept-charset="utf-8" action="/system/login-guest?account-id=295153&amp;next=%2Ftst%2Foutput%2Ftst.zip%3Fdownload%3Dzip&amp;path=%2F_a295153%2Ftst%2Foutput%2Ftst.zip&amp;set-lang=en">
<div id="breadcrumb" style="margin-top:0px;">
<table id="breadcrumb-table" border="0" cellpadding="0" cellspacing="0" width="100%">
<div class="noNavMargin">
</div>
</table>
</div>
<div id="divBody">
<script>var isMobile = 'false';
    	
	    	function showOpenAppNotification() {
	    		if(isMobile == 'true') {
		    		var mobileLoginPageOpenAppNotificationElement = document.getElementById("mobileLoginPageOpenAppNotification");	
					if (mobileLoginPageOpenAppNotificationElement) {
						var notificationHeight = mobileLoginPageOpenAppNotificationElement.clientHeight;
						document.getElementById("mobileLoginContainer").style.backgroundPosition = "0 " + notificationHeight;
						mobileLoginPageOpenAppNotificationElement.style.marginTop = "0";
						mobileLoginPageOpenAppNotificationElement.style.visibility = "visible";
						mobileLoginPageOpenAppNotificationElement.style.position = "relative";	
					}
	    		}
	    	}	    	
    	
	</script><script src="/common/scripts/jQuery/js/minified/jquery-3.6.0.min.js?ver=12.1.0"></script><script type="text/javascript" src="/common/scripts/coral_min.js?ver=12.1.0" charset="utf-8"></script>
<link rel="stylesheet" href="/common/styles/coral_min.css?ver=12.1.0">
<link rel="stylesheet" type="text/css" href="/common/styles/breeze_login.css?ver=12.1.0">
<style>
			/* Override margins for the system template */
			.pageContent {margin: 0 0 0 0 !important;}    
		</style>
<div id="systemContainer" style="min-width:950px;width:expression(document.body.clientWidth < 950? '950px': '100%' );">
<div id="loginBgColorX" class="login loginBGColor noScript">
<div id="loginFormX" class="loginForm loginBGColor">
<div class="main-login-form">
<div class="login-page-header">
<img src="/common/images/logos/connect_appicon.svg" alt="Adobe Connect Logo"></div>
<hr class="horizontal-line">
<div id="loginSection" class="loginField">
<script xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder">
			function setMeetingPasscode(passcode, userType) {
				document.getElementById("meeting-passcode").value = passcode;
				setSubmittedForm(userType);
			}
			
			function setSubmittedForm(val) {
				document.getElementById("submitted-mobile-form").value = val;
			}
			
			function loginMeetingUser(){
				document.getElementById("login-button").click();
			}
		</script><input id="meeting-passcode" name="meeting-passcode" type="hidden" xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder"><input id="submitted-mobile-form" name="submitted-mobile-form" type="hidden" xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder">
<div id="formContainer" class="login-page-form" xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder">
<div id="mobileWebappLoginForm">
<div class="coral-Form-fieldwrapper">
<div id="showLoginLogo" style="display: none;">
</div>
<img id="loginLogo" src="/_a295153/loginPage/custom/images/logos/login_logo.png" alt="Adobe Connect Login form Image"><div class="login-error" style="display:none;" id="invalid-email-error">Entered username is not a valid email address.</div>
<label for="name" id="username" class="coral-Form-fieldlabel login-field-label loginField">Username</label><input is="coral-textField" type="text" name="login" id="name" onblur="redirectToIDPServer()" class="
					coral-Textfield login-textfield 
				" aria-labelledby="username" autocomplete="username" onkeypress="if ((event.which &amp; event.which == 13) || (event.keyCode &amp; event.keyCode == 13)) {setTimeout(&quot;loginMeetingUser()&quot;, 500);return false;} else return true;" placeholder="Enter email address" variant="quiet"><label for="pwd" id="password" class="coral-Form-fieldlabel login-field-label loginField">Password</label><input type="password" is="coral-textfield" name="password" id="pwd" class="
					coral-Textfield login-textfield 
				" autocomplete="off" aria-labelledby="password" aria-required="true" onkeypress="if ((event.which &amp; event.which == 13) || (event.keyCode &amp; event.keyCode == 13)) {setTimeout(&quot;loginMeetingUser()&quot;, 500);return false;} else return true;" placeholder="Type here" variant="quiet">
<div class="login-form-remember-me-placeholder">
<div class="login-form-forgot-password">
<a href="/system/login-content/reset?account-id=295153&amp;next=%2Ftst%2Foutput%2Ftst.zip%3Fdownload%3Dzip&amp;path=%2F_a295153%2Ftst%2Foutput%2Ftst.zip&amp;set-lang=en" target="_self" style="left:5%; background:none" class="loginField">Forgot password?</a>
</div>
<div class="login-form-remember-me">
<label class="coral-Checkbox"><coral-checkbox class="coral-Checkbox-input" name="remember" id="remember_me">Remember username</coral-checkbox></label>
</div>
</div>
</div>
<div class="login-form-placeholder">
<input type="submit" class="button" role="button" value="Login" aria-describedby="login-button" name="feature=1459" onClick="setLoginCookie(this.form.elements[&quot;login&quot;].value);; return 0" id="login-button">
</div>
</div>
</div>
<script xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder">

			var user = getValueFromCookie("BreezeLoginCookie");
			
			//Since we clear the login cookie whenever the checkbox is unchecked, 
			//we can conclude that if the login cookie has anything other than the 
			//empty string, the checkbox was checked at the last login. So we want 
			//to reflect that in the UI.
			
			var rememberMe = (user != "");
			
			// Fix for Bug#3212044 - Adding null check to avoid JS error
			if(document.contentForm.login != null){
				document.contentForm.login.value = user;
                if(document.contentForm.remember) {
				    document.contentForm.remember.checked = rememberMe;
                }
				if(document.contentForm.domain != null){
					document.contentForm.domain.focus();
				} else {
					document.contentForm.login.focus();
				}
			}
		</script>
</div>
</div>
<div class="login-page-footer loginBGColor">
<img src="/common/images/logos/adobe_logo.png" height="20" style="margin-bottom:15px;padding-right:230px;display:block;" alt="Adobe"><span class="login-help">
<div id="touDiv" class="loginHelp touDiv" style="margin-bottom:8px; font-size:12px; line-height:15px; text-align:left" xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder">
<m id="general-terms-of-use">The Adobe <a href="https://www.adobe.com/go/Connect_tou" target="_blank" rel="noopener noreferrer">General Terms of Use</a> will govern use of Adobe Connect</m>
</div>
<a class="loginHelp" title="12.1.5" target="_blank" rel="noopener noreferrer" href="/common/help/en/go/login_ts.html" xmlns:urlenc="http://www.adobeconnect.com/xt/java/java.net.URLEncoder">Help</a></span>
<div class="copy-right">&copy; 2001-2022 Adobe. All Rights Reserved.</div>
</div>
</div>
<div class="side-logo">
<img id="loginSideLogo" src="/_a295153/loginPage/custom/images/logos/login_side_logo_html.png" alt="Adobe Connect Banner Image"></div>
</div>
</div>
<script>
		  //Add background image url for side-logo
		  var isMobile = false;
		  if(!isMobile){

				var backgroundImageUrl = "";
				var _loginSideLogo = document.getElementById('loginSideLogo');
				if (_loginSideLogo) {
					backgroundImageUrl = _loginSideLogo.src;
				}
		      //Set this url to css background-image of side-logo
		      document.getElementsByClassName('side-logo')[0].style.backgroundImage = "url(" + backgroundImageUrl+ ")";
	      }
		</script>
<div style="width:100%;margin-top: 15px;">
</div>
</div>
</form>
<script language="javascript">
				   if('/system/login-guest?account-id=295153&next=%2Ftst%2Foutput%2Ftst.zip%3Fdownload%3Dzip&path=%2F_a295153%2Ftst%2Foutput%2Ftst.zip&set-lang=en' == '/admin/home/homepage/search/search-results' && 
					  'true' == 'true' )
					  {
                      document.contentForm.onsubmit=function() {return false};
					  }
                  </script><!--[if IE]>
                  <script language="javascript">
                      document.contentForm.onsubmit=function() {document.charset='utf-8';};
                  </script>
              <![endif]-->
</div>
<div class="mode-xml">
</div>
<script src="/common/scripts/JavaScriptServlet"></script><script>

				var defaultLanguage = 'en'
				var rootAppCsrfToken = '';
				var isHtmlEnabled;
				var pageKey;
			</script>
<link href="/common/ccapps/root-react-app/css/client.70750cc3b423114dfedc.css?ver=12.1.5" rel="stylesheet">
<script src="/common/ccapps/root-react-app/runtime~client.548d063281c3d4b6ecf1.js?ver=12.1.5"></script><script src="/common/ccapps/root-react-app/vendors~client.5da2bac3fc019c53d429.js?ver=12.1.5"></script><script src="/common/ccapps/root-react-app/client.70750cc3b423114dfedc.js?ver=12.1.5"></script>
</body>
</html>
